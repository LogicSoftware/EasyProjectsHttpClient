<#@ template language="C#" hostspecific="True" debug="True" #>
<#@ output extension="cs" encoding="utf-8"  #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Xml" #>
<#@ assembly name="System.Xml.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Xml.Linq" #>
<#@ import namespace="System.Xml.XPath" #>
// --------------------------------------------------------------------------------------------------------------------
// <copyright file="Entities.cs" company="Logic Software">
//   (c) Logic Software
// </copyright>
// <summary>
//   Generated class for entities.
//   !!!DO NOT CHANGE IT DIRECTLY!!!
// </summary>
// --------------------------------------------------------------------------------------------------------------------

namespace EasyProjects.ClientModel.Entities
{
    using System;
    using System.Collections.Generic;
	using System.Diagnostics;
	using System.Runtime.Serialization;
    using System.Xml.Serialization;
<# 
    string viewsPath = Host.ResolvePath(@"..\Views.config");
    var root = XElement.Load(viewsPath);
   
    string entityClassesPath = Host.ResolvePath(@"..\EntityClasses.config");
    var entitiesRoot = XElement.Load(entityClassesPath);

	var views =
        from view in root.Descendants("View")
        let viewName = view.Attribute("Name").Value
		let hasIdenticalEntity = ((IEnumerable)entitiesRoot.XPathEvaluate("//EntityClass[@Name='" + viewName + "']")).Cast<XElement>().Any()			
		let entityName = GetEntityClass(entitiesRoot, (string) view.Attribute("RootEntityName"))
		let entity = ((IEnumerable) entitiesRoot.XPathEvaluate(string.Format(@"//EntityClass[@Name='{0}']", entityName))).Cast<XElement>().FirstOrDefault()
		// exclude empty views
		where view.Descendants("Field").Any() &&
		viewName != "FormWithItemsCount"
        orderby viewName
        select new {Name = hasIdenticalEntity ? viewName + "View" : viewName, Class = view, entity = entity, entityName = entityName};
			    
    foreach (var view in views)
    {
		if(view.Class.Attribute("EnableAPI") == null || Convert.ToBoolean(view.Class.Attribute("EnableAPI").Value) == false)
					continue;

		var rootEntityPk = GetViewBaseID(view.entityName, view.entity, view.Class,entitiesRoot);

#>
    /// <summary>
    /// Generated class for view <#= view.Name #>
    /// </summary>
	[DebuggerDisplay("View.{ViewName}")]
	public partial class <#= view.Name #> 
    { 
<#  	var fields =
			from field in view.Class.Descendants("Field")
			let fieldName = field.Attribute("Name").Value
			let fieldEntity = ((IEnumerable) entitiesRoot.XPathEvaluate(string.Format(@"//EntityClass[@Name='{0}']", field.Attribute("EntityName").Value))).Cast<XElement>().SingleOrDefault()
			let hasExpression = field.Attribute("Expression") != null
			let entityField = fieldEntity == null ? null : ((IEnumerable) fieldEntity.XPathEvaluate(string.Format(@"./Fields//Field[@Name='{0}']", fieldName))).Cast<XElement>().SingleOrDefault()
			let entityFieldHasAlias = entityField != null && entityField.Attribute("Alias") != null
			let viewFieldHasAlias = field.Attribute("Alias") != null
			let fullName = viewFieldHasAlias ? field.Attribute("Alias").Value : ((entityFieldHasAlias) ? entityField.Attribute("Alias").Value : (field.Attribute("EntityName").Value + "_" + fieldName)) 
			where fieldName != view.Name
        	select new {Name = fieldName, FullName = fullName, HasExpression = hasExpression, Class = field, EntityName = field.Attribute("EntityName").Value } ;
					
		foreach (var field in fields) {	
			#>
        public <#= GetPropertyTypeForField(field.Class, entitiesRoot) #> <#= field.HasExpression ? field.Name : field.FullName #> {get; set;}
<#  } #>
<#  	var refFields =
			from field in view.Class.Descendants("ReferenceField")
			let fieldName = field.Attribute("Name").Value
			where fieldName != view.Name
				&& !fields.Any(f => f.Name == fieldName)
        	select new {Name = fieldName, Class = field} ;
		
		foreach (var field in refFields) { 
#>		
        public <#= GetPropertyTypeForField(field.Class, entitiesRoot) #>  <#= field.Name #>  {get; set;}
<#  } #>

<#  	if(view.entity != null)
{		
		var permFields =
			from field in view.entity.Descendants("PermissionField")
			let fieldName = field.Attribute("Name").Value
			let alias = field.Attribute("Alias").Value.Trim('[',']')
			where fieldName != view.entity.Attribute("Name").Value
		    where !fields.Any(f => f.Name == alias)
        	select new {Name = fieldName, Alias = alias, Class = field} ;
		
		if(permFields.Any())
		{ #>
<#			
			foreach (var permField in permFields) 
			{ #>		
        public bool <#= permField.Alias #>  {get; set;}
<#  		} #>
<#		} #>	
	
<# 		if(view.entity.Attribute("PermissionTable") != null)
		{ #>
<#		if (!permFields.Any(f => f.Alias == "CanEdit"))
		{ #>
			public bool CanEdit  {get; set;}
<#		} #>

<#		if (!permFields.Any(f => f.Alias == "CanDelete"))
		{ #>
			public bool CanDelete  {get; set;}
<#		} #>
<# 		}
		
}		#>
    }
    
<#  } #>
}


<#+ 			
	public class EntityFieldInfo
	{
		public string EntityName { get; set; }
		public string FieldName { get; set; }
		public string FieldFullName { get; set; }
	}

	private EntityFieldInfo GetViewBaseID(string entityName, XElement element, XElement view,XElement entitiesRoot)
	{
		var fields =
			from field in view.Descendants("Field")
			let fieldName = field.Attribute("Name").Value
			let fieldEntity = ((IEnumerable) entitiesRoot.XPathEvaluate(string.Format(@"//EntityClass[@Name='{0}']", field.Attribute("EntityName").Value))).Cast<XElement>().SingleOrDefault()
			let hasExpression = field.Attribute("Expression") != null
			let entityField = fieldEntity == null ? null : ((IEnumerable) fieldEntity.XPathEvaluate(string.Format(@"./Fields//Field[@Name='{0}']", fieldName))).Cast<XElement>().SingleOrDefault()
			let entityFieldHasAlias = entityField != null && entityField.Attribute("Alias") != null
			let viewFieldHasAlias = field.Attribute("Alias") != null
			let fullName = (entityFieldHasAlias) ? entityField.Attribute("Alias").Value : (viewFieldHasAlias ? field.Attribute("Alias").Value : (field.Attribute("EntityName").Value + "_" + fieldName)) 
			where fieldName != view.Name
        	select new EntityFieldInfo {FieldFullName = fullName,  EntityName = field.Attribute("EntityName").Value, FieldName = fieldName};
    
	
	    if((element.Attribute("TableName") == null ||
		    element.Attribute("TableName").Value == "None" || 
			element.Attribute("PrimaryKeyField") == null || 
			element.Attribute("PrimaryKeyField").Value == "Name" ))
		{
		   return null;
		}
		else
		{
		   var pkFieldName = element.Attribute("PrimaryKeyField").Value;
		   var field = fields.FirstOrDefault(p=>p.EntityName == entityName && p.FieldName == pkFieldName);

		   return field;
		}
	}
	
	
	private string GetEntityClass(XElement entitiesDoc, string entityName)
	{			
		var	alias = (from entityAlias in entitiesDoc.Descendants("EntityClassAlias")
			where entityAlias.Attribute("Name").Value == entityName
			select entityAlias.Attribute("EntityClassName").Value).FirstOrDefault();	
		
		if(!string.IsNullOrEmpty(alias))
		{
			return alias; 
		}
		
		return entityName;
	}
	
	private string GetPropertyTypeForField(XElement fieldElement, XElement entitiesDoc)
	{		
		IEnumerable dataTypes = (IEnumerable) fieldElement.XPathEvaluate(@"./Descriptor/@DataType");
	
		string entityName = GetEntityClass(entitiesDoc, fieldElement.Attribute("EntityName").Value);
		string fieldName = (string) fieldElement.Attribute("Name");
		
		XElement entityClass = ((IEnumerable) entitiesDoc.XPathEvaluate(string.Format(@"//EntityClass[@Name='{0}']", entityName))).Cast<XElement>().FirstOrDefault();		
		XElement entityField = ((IEnumerable) entityClass.XPathEvaluate(string.Format(@"./Fields//Field[@Name='{0}']", fieldName))).Cast<XElement>().FirstOrDefault();
		
		string primaryKeyField = (string) entityClass.Attribute("PrimaryKeyField");

		string accessType = (string) fieldElement.Attribute("AccessType");
		bool hasExpression = fieldElement.Attribute("Expression") != null;
		
		//check EntityConfig/Fields for type
		if (!dataTypes.Cast<XAttribute>().Any() && entityField != null )
		{			
			dataTypes = (IEnumerable) entityField.XPathEvaluate(@"./Descriptor/@DataType");				
			accessType = (string) entityField.Attribute("AccessType");
			hasExpression = entityField.Attribute("Expression") != null;
		}			
		
		//check EntityConfig/ReferenceFields for type
		if (!dataTypes.Cast<XAttribute>().Any())
		{
			var refField = ((IEnumerable) entityClass.XPathEvaluate(string.Format(@"./ReferenceFields//ReferenceField[@Name='{0}']", fieldName))).Cast<XElement>().FirstOrDefault();
				
			if(refField != null)	
			{
				accessType = (string) refField.Attribute("ReferenceType");
								
				// use int type if it's a reference field
				return accessType == "Mandatory" ? "int" : "int?";
			}
		}		
		
		bool nullable = (accessType != "Mandatory") && fieldName != primaryKeyField;
		
		if (entityField != null)
		{
			var predefinedManagedType = entityField.Attribute("ManagedType");
			if (predefinedManagedType != null)
			{
				return (string)predefinedManagedType;
			}
		}

		switch ((string) dataTypes.Cast<XAttribute>().FirstOrDefault() )
		{
			case "Integer":
				return nullable ? "int?" : "int";
			case "Bool":
				return nullable ? "bool?" : "bool";
			case "Decimal":
				return nullable ? "decimal?" : "decimal";
			case "Date":
				return nullable ? "DateTime?" : "DateTime";			
			case "String":
				return "string";
			case "HtmlText":
				return "string";
			case "MultilineText":
				return "string";				        
			case "XML":
			case "Raw":
				return "string";
			default:
				return "object";
		}		
	}	
		
	private void AddDisplayFormatAnnotations(XElement fieldElement, XElement entitiesDoc)
	{		
		string formatString = (string) ((IEnumerable)fieldElement.XPathEvaluate(@"./Descriptor/@FormatString")).Cast<XAttribute>().FirstOrDefault();
		
		if (string.IsNullOrEmpty(formatString))
		{
			string entityName = GetEntityClass(entitiesDoc, fieldElement.Attribute("EntityName").Value);
			
			formatString = (string)  ((IEnumerable) entitiesDoc.XPathEvaluate(
			string.Format(@"//EntityClass[@Name='{1}']//Field[@Name='{0}']/Descriptor/@FormatString", 
				fieldElement.Attribute("Name").Value,
				entityName))).Cast<XAttribute>().FirstOrDefault();	 
		}
		
		if (!string.IsNullOrEmpty(formatString))
		{					
			this.WriteLine(string.Format("[DisplayFormat(DataFormatString = \"{0}\")]", formatString));	 
		}		
	}
	
	private void AddPermissionAttributes(XElement entityElement,XElement root)
	{
	   var hasVisibilityPermissionAttribute = entityElement.Attribute("HasVisibilityPermission");
	   if(hasVisibilityPermissionAttribute != null)
	   {
	     string attribute = string.Format("[HasVisibilityPermission(Name=\"{0}\")]", hasVisibilityPermissionAttribute.Value);
	     this.Write(attribute);
		 this.Write(Environment.NewLine);

	   }else
	   {
	     // check if this entity have root entity with permission
		 var rootEntityNameAttribute  = entityElement.Attribute("RootEntityName");
		 if(rootEntityNameAttribute != null && rootEntityNameAttribute.Value != "None")
		 {
			var entities =
			from entityClass in root.Descendants("EntityClass")
			let entityName = entityClass.Attribute("Name").Value
			let visibilityPermission =  entityClass.Attribute("HasVisibilityPermission")!= null ?entityClass.Attribute("HasVisibilityPermission").Value : null
			select new {Name = entityName, VisibilityPermissionName = visibilityPermission};

		    var rootEntity = entities.First(p=>p.Name == rootEntityNameAttribute.Value);
		
		    if(rootEntity.VisibilityPermissionName != null)
			{
				string attribute = string.Format("[HasVisibilityPermission(Name=\"{0}\")]", rootEntity.VisibilityPermissionName);
				this.Write(attribute);
				this.Write(Environment.NewLine);
			}
		 }
	   }	
	}
	#>